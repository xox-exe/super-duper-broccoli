$(document).ready(function() {
	$("#privkeyenc,#address,#privkey").click(function() {
		this.focus();
		this.select();
	});
});

function generateSingleWallet() {
	var password = $("#ethgenpassword").val();
	if (password == "") {
		alert("Please enter a password.");
		return;
	}
	if (password.length < 7) {
		alert("Your password must be at least 7 characters");
		return;
	}
	$("#generatedWallet").show();
	var acc = new Accounts();
	var newAccountEnc = acc.new(password);
    var checksummedAdd = toChecksumAddress(newAccountEnc.address);
	$("#address").val(checksummedAdd);
	$('#addressIdenticon').css("background-image", 'url(' + blockies.create({
		seed: newAccountEnc.address.toLowerCase(),
		size: 8,
		scale: 16
	}).toDataURL() + ')');
	var addressHash = cryptoJSToHex(CryptoJS.SHA3(newAccountEnc.address));
	addressHash = addressHash.substr(addressHash.length - 4);
	var newAccountUnEnc = acc.get(newAccountEnc.address, password);
	$("#privkey").val(newAccountUnEnc.private);
	newAccountEnc.private = newAccountEnc.private + addressHash;
	$("#privkeyenc").val(newAccountEnc.private);
	$("#qrcodeAdd").empty();
	new QRCode($("#qrcodeAdd")[0], {
		text: newAccountEnc.address,
		width: $("#qrcode").width(),
		height: $("#qrcode").width(),
		colorDark: "#000000",
		colorLight: "#ffffff",
		correctLevel: QRCode.CorrectLevel.H
	});
	$("#qrcode").empty();
	new QRCode($("#qrcode")[0], {
		text: newAccountUnEnc.private,
		width: $("#qrcode").width(),
		height: $("#qrcode").width(),
		colorDark: "#000000",
		colorLight: "#ffffff",
		correctLevel: QRCode.CorrectLevel.H
	});
	var fileType = "text/json;charset=UTF-8";
	var encblob = new Blob([JSON.stringify(newAccountEnc)], {
		type: fileType
	});
	var unencblob = new Blob([JSON.stringify(newAccountUnEnc)], {
		type: fileType
	});
	$("#encdownload").attr('href', window.URL.createObjectURL(encblob));
	$("#encdownload").attr('download', newAccountEnc.address + '-Encrypted.json');
	$("#unencdownload").attr('href', window.URL.createObjectURL(unencblob));
	$("#unencdownload").attr('download', newAccountEnc.address + '-Unencrypted.json');
	acc.clear();
}

var SERVERURL = "https://rpc.myetherwallet.com/api.php";
var KRAKENAPI = "https://api.kraken.com/0/public/";
var COINMARKETCAPAPI = "https://coinmarketcap-nexuist.rhcloud.com/api/";
function getBalance(addr, callback){
    $.post( SERVERURL, { balance: addr }).done(callback);
}
function getTransactionData(addr, callback){
    $.post( SERVERURL, { txdata: addr }).done(callback);
}
function sendRawTx(rawTx, callback){
    $.post( SERVERURL, { rawtx: rawTx }).done(callback);
}
function getEstimatedGas(txobj, callback){
    $.post( SERVERURL, { estimatedGas: txobj }).done(callback);
}
function getEthCall(txobj, callback){
    $.post( SERVERURL, { ethCall: txobj }).done(callback);
}
function getETHvalueKraken(slavePair, callback){
    var prefix = "XETH";
    $.post( KRAKENAPI+"Ticker", { pair: prefix+slavePair }).done(function(data){
        callback(data['result'][prefix+slavePair]['o']);
    });
}
function getETHvalue(slavePair, callback){
    var prefix = "eth";
    slavePair = slavePair.toLowerCase();
    $.get(COINMARKETCAPAPI+prefix, function( data ) {
        callback(parseFloat(data['price'][slavePair]).toFixed(6));
    });
}
var stdTransactionGas = 21000;

function createTransaction(privkey, to, amountinwei, gasL, successcb, errorcb) {
	if (privkey.length != 64) {
		errorcb("Invalid Private key, try again");
		return;
	}
	if (!validateEtherAddress(to)) {
		errorcb("Invalid to Address, try again");
		return;
	}
	if (!$.isNumeric(amountinwei) || amountinwei <= 0) {
		errorcb("Invalid amount, try again");
		return;
	}
	var privateKey = new Buffer(privkey, 'hex');
	var address = strPrivateKeyToAddress(privkey);
	getTransactionData(address, function(data) {
		if (data.error) {
			errorcb("Error occurred: " + data.msg);
			return;
		}
		data = data.data;
		var nonce = padLeftEven(BNtoHex(new BigNumber(data.nonce)));
		var gasPrice = padLeftEven(BNtoHex(new BigNumber(data.gasprice).plus(1000000000).toDigits(2))); //adding extra 1gwei to be safer
		var gasLimit = padLeftEven(BNtoHex(new BigNumber(gasL))); //standard 21000 per transaction
		var value = padLeftEven(BNtoHex(new BigNumber(String(amountinwei))));
		var rawTx = {
			nonce: '0x' + nonce,
			gasPrice: '0x' + gasPrice,
			gasLimit: '0x' + gasLimit,
			to: to,
			value: '0x' + value,
			data: ''
		};
		var tx = new Tx(rawTx);
		tx.sign(privateKey);
		verifyUpFrontCost(rawTx, function(estimatedCost) {
			if (estimatedCost > data.balance) {
				errorcb("You dont have enough balance in your account to process is transaction");
				return
			}
			var serializedTx = '0x' + tx.serialize().toString('hex');
			var rdata = {
				raw: JSON.stringify(rawTx),
				signed: serializedTx
			}
			successcb(rdata);
		}, errorcb);
	});
}

function createTransactionFromRaw(rawObj, privkey, successcb, errorcb) {
	if (privkey.length != 64) {
		errorcb("Invalid Private key, try again");
		return;
	}
	if (!validateEtherAddress(rawObj.to)) {
		errorcb("Invalid Address, try again");
		return;
	}
	if (!$.isNumeric(rawObj.value) || rawObj.value < 0) { //
		errorcb("Invalid amount, try again");
		return;
	}
    if (!$.isNumeric(rawObj.nonce) || rawObj.nonce < 0) {
		errorcb("Invalid nonce, try again");
		return;
	}
    if (!$.isNumeric(rawObj.gasPrice) || rawObj.gasPrice <= 0) {
		errorcb("Invalid gas price, try again");
		return;
	}
    if (!$.isNumeric(rawObj.gasLimit) || rawObj.gasLimit <= 0) {
		errorcb("Invalid gas limit, try again");
		return;
	}
    if (rawObj.data!=''&&!/^[0-9A-F]+$/i.test(rawObj.data)) {
		errorcb("Invalid data, try again");
		return;
	}
	var privateKey = new Buffer(privkey, 'hex');
	var address = strPrivateKeyToAddress(privkey);
	var nonce = padLeftEven(BNtoHex(new BigNumber(rawObj.nonce)));
	var gasPrice = padLeftEven(BNtoHex(new BigNumber(rawObj.gasPrice)));
	var gasLimit = padLeftEven(BNtoHex(new BigNumber(rawObj.gasLimit)));
	var value = padLeftEven(BNtoHex(new BigNumber(String(rawObj.value))));
	var rawTx = {
		nonce: '0x' + nonce,
		gasPrice: '0x' + gasPrice,
		gasLimit: '0x' + gasLimit,
		to: rawObj.to,
		value: '0x' + value,
		data: rawObj.data=='' ? '' : '0x' + rawObj.data
	};
	var tx = new Tx(rawTx);
	tx.sign(privateKey);
	var serializedTx = '0x' + tx.serialize().toString('hex');
	var rdata = {
		raw: JSON.stringify(rawTx),
		signed: serializedTx,
        address: address
	}
	successcb(rdata);
}
function rawToTransaction(serializedTx){
    var tx = new Tx(serializedTx);
    var rawTx = {
		nonce: tx.nonce.toString('hex')=="" ? 0 : new BigNumber('0x'+tx.nonce.toString('hex')).toString(),
		gasPrice: tx.gasPrice.toString('hex')=="" ? 0 : new BigNumber('0x'+tx.gasPrice.toString('hex')).toString(),
		gasLimit: tx.gasLimit.toString('hex')=="" ? 0 : new BigNumber('0x'+tx.gasLimit.toString('hex')).toString(),
		to: '0x'+tx.to.toString('hex'),
		value: tx.value.toString('hex')=="" ? 0 : new BigNumber('0x'+tx.value.toString('hex')).toString(),
		data: tx.data.toString('hex')
	};
    return rawTx;
}
function verifyUpFrontCost(rawTx, successcb, errorcb) {
	getEstimatedGas(rawTx, function(data) {
		if (data.error) {
			errorcb("Error occurred: " + data.msg);
		} else {
			if (new BigNumber(formatHexString(data.data, 'hex')).greaterThan(new BigNumber(formatHexString(rawTx.gasLimit, 'hex')))) {
				errorcb("Gas limit is too low");
			} else {
				var gasPrice = new BigNumber(formatHexString(rawTx.gasPrice, 'hex')).times(new BigNumber(formatHexString(rawTx.gasLimit, 'hex')));
				successcb(gasPrice.plus(new BigNumber(formatHexString(rawTx.value, 'hex'))).toNumber());
			}
		}
	});
}

function getMaxSendAmount(address, gasL, successcb, errorcb) {
	getTransactionData(address, function(data) {
		if (data.error) {
			errorcb("Error occurred: " + data.msg);
			return;
		}
		data = data.data;
		var gasPrice = new BigNumber(data.gasprice).plus(1000000000).toDigits(2).times(gasL);
		var maxVal = new BigNumber(String(data.balance)).minus(gasPrice);
		if (maxVal.lessThan(0)) {
			errorcb("Not enough balance to send a transaction");
		} else {
			successcb(toEther(maxVal.toString(), 'wei'));
		}
	});
}

function sendTransaction(signedRawTx, successcb, errorcb) {
	sendRawTx(signedRawTx, function(data) {
		if (data.error) {
			errorcb("Error occurred: " + data.msg);
			return;
		}
		successcb(data.data);
	});
}

function BNtoHex(bn) {
	return bn.toString(16);
}

function padLeftEven(hex) {
	if (hex.length % 2 != 0) return '0' + hex;
	else
	return hex;
}

function formatHexString(hex, format) {
	if (format == 'hex') {
		if (hex.substring(0, 2) == '0x') return hex;
		else
		return '0x' + hex;
	} else if (format == 'raw') {
		if (hex.substring(0, 2) == '0x') return hex.substring(2);
		else
		return hex;
	}
}

function fiatToWei(number, pricePerEther) {
	var returnValue = new BigNumber(String(number)).div(pricePerEther).times(getValueOfUnit('ether')).round(0);
	return returnValue.toString(10);
}

function toFiat(number, unit, multi) {
	var returnValue = new BigNumber(toEther(number, unit)).times(multi).round(5);
	return returnValue.toString(10);
}

function toEther(number, unit) {
	var returnValue = new BigNumber(toWei(number, unit)).div(getValueOfUnit('ether'));
	return returnValue.toString(10);
}

function toWei(number, unit) {
	var returnValue = new BigNumber(String(number)).times(getValueOfUnit(unit));
	return returnValue.toString(10);
}

function getValueOfUnit(unit) {
	unit = unit ? unit.toLowerCase() : 'ether';
	var unitValue = unitMap[unit];
	if (unitValue === undefined) {
		throw new Error('This unit doesn\'t exists, please use the one of the following units' + JSON.stringify(unitMap, null, 2));
	}
	return new BigNumber(unitValue, 10);
}

function getBestEtherKnownUnit(amountInWei) {
	amountInWei = String(amountInWei);
	var curUnit = 'wei';
	var tAmount = new BigNumber(amountInWei);
	for (var key in knownUnitMap) {
		if (knownUnitMap.hasOwnProperty(key)) {
			if (new BigNumber(amountInWei).greaterThan(new BigNumber(knownUnitMap[key]))) {
				curUnit = key;
				tAmount = new BigNumber(amountInWei).div(new BigNumber(knownUnitMap[key]));
			}
		}
	}
	return {
		unit: curUnit,
		amount: tAmount.toDigits(10).toString(10)
	};
}
var knownUnitMap = {
	'wei': '1',
	'kwei': '1000',
	'gwei': '1000000000',
	'szabo': '1000000000000',
	'finney': '1000000000000000',
	'ether': '1000000000000000000'
};
var unitMap = {
	'wei': '1',
	'kwei': '1000',
	'ada': '1000',
	'femtoether': '1000',
	'mwei': '1000000',
	'babbage': '1000000',
	'picoether': '1000000',
	'gwei': '1000000000',
	'shannon': '1000000000',
	'nanoether': '1000000000',
	'nano': '1000000000',
	'szabo': '1000000000000',
	'microether': '1000000000000',
	'micro': '1000000000000',
	'finney': '1000000000000000',
	'milliether': '1000000000000000',
	'milli': '1000000000000000',
	'ether': '1000000000000000000',
	'kether': '1000000000000000000000',
	'grand': '1000000000000000000000',
	'einstein': '1000000000000000000000',
	'mether': '1000000000000000000000000',
	'gether': '1000000000000000000000000000',
	'tether': '1000000000000000000000000000000'
};
function decryptPresaleKey(presaleJson, presalepass) {
	presaleJson = JSON.parse(presaleJson);
	var encSeedBytes = hexToBytes(presaleJson.encseed);
	var iv = hexToCryptoJS(bytesToHex(encSeedBytes.slice(0, 16)));
	var cipherText = hexToCryptoJS(bytesToHex(encSeedBytes.slice(16)));
    var derivedKey = sha256.pbkdf2(stringToBytes(presalepass), stringToBytes(presalepass), 2000, 16);
	var passbytes = hexToBytes(bytesToHex(derivedKey)).slice(0, 16);
	var plainText = CryptoJS.AES.decrypt({
		ciphertext: cipherText,
	}, hexToCryptoJS(bytesToHex(passbytes)), {
		iv: iv,
		mode: CryptoJS.mode.CBC,
		padding: CryptoJS.pad.Pkcs7,
	});
	var plainTextHex = cryptoJSToHex(plainText);
	plainText = hex2str(plainTextHex);
	var ethPriv = CryptoJS.SHA3(plainText, {
		outputLength: 256
	});
    var privkey = ethPriv.toString();
    if(verifyPrivKey(privkey, presaleJson.ethaddr))
        return privkey;
    else
        throw "Invalid Password";
}

function decryptGethKeyV3(gethJson, password) {
	gethJson = JSON.parse(gethJson);
    if(gethJson.Crypto==null&&gethJson.crypto!=null)
        gethJson.Crypto = gethJson.crypto;
	var iv = gethJson.Crypto.cipherparams.iv;
	var cipherText = gethJson.Crypto.ciphertext;
	var bytesDerivedKey = getKDFKey(gethJson.Crypto, password);
	var bytesDerivedKey16 = hexToBytes(bytesToHex(bytesDerivedKey)).slice(0, 16);
	var decrypted = CryptoJS.AES.decrypt({
		ciphertext: hexToCryptoJS(cipherText)
	}, hexToCryptoJS(bytesToHex(bytesDerivedKey16)), {
		mode: CryptoJS.mode.CTR,
		padding: CryptoJS.pad.ZeroPadding,
		iv: hexToCryptoJS(iv)
	});
    var privkey = cryptoJSToHex(decrypted);
    if(verifyPrivKey(privkey, gethJson.address))
        return privkey;
    else
        throw "Invalid Password";
}
function decryptTxtPrivKey(strkey, password){
    if(strkey.length==128){
        var privatebytes = CryptoJS.AES.decrypt(strkey, password);
        var privkey = hex2str(cryptoJSToHex(privatebytes));
    } else if(strkey.length==132){
        var privatebytes = CryptoJS.AES.decrypt(strkey.substr(0,128), password);
        var privkey = hex2str(cryptoJSToHex(privatebytes));
        var addressHash = strkey.substr(strkey.length-4);
        var address = formatAddress(strPrivateKeyToAddress(privkey), 'hex');
        var generatedHash = cryptoJSToHex(CryptoJS.SHA3(address));
        if(generatedHash.substr(generatedHash.length-4)!=addressHash)
            throw "Invalid Password";
    } else if(strkey.length==64){
        var privkey = strkey;
    } else {
        throw "Error while decrypting your wallet";
    }
    return privkey;
}
function decryptEthWalletJson(ethjson, password){
    ethjson = JSON.parse(ethjson);
    if(ethjson.locked&&ethjson.private.length==128){
        var privatebytes = CryptoJS.AES.decrypt(ethjson.private, password);
        var privkey = hex2str(cryptoJSToHex(privatebytes));
    }else if (ethjson.locked&&ethjson.private.length==132){
        var privatebytes = CryptoJS.AES.decrypt(ethjson.private.substr(0,128), password);
        var privkey = hex2str(cryptoJSToHex(privatebytes));
    }else if(!ethjson.locked&&ethjson.private.length==64){
        var privkey = ethjson.private;
    } else {
        throw "Error while decrypting your wallet";
    }
    if(verifyPrivKey(privkey, formatAddress(ethjson.address, 'raw')))
        return privkey;
    else
        throw "Invalid Password";
}
function walletRequirePass(ethjson){
    var jsonArr;
    try {
        jsonArr = JSON.parse(ethjson);
    } catch(err) {
        throw "not a valid wallet file";
    } 
    if(jsonArr.encseed!=null)
        return true;
    else if(jsonArr.Crypto!=null||jsonArr.crypto!=null)
        return true
    else if(jsonArr.hash!=null&&jsonArr.locked)
        return true;
    else if(jsonArr.hash!=null&&!jsonArr.locked)
        return false;
    else
        throw "Sorry! we dont have a clue what kind of wallet file this is.";
}
function verifyPrivKey(privkey, address){
    if(privkey.length!=64)
        return false;
    if(strPrivateKeyToAddress(privkey)!=address)
        return false;
    else
        return true;
}
function getWalletFilePrivKey(strjson, password){
    var jsonArr = JSON.parse(strjson);
    if(jsonArr.encseed!=null)
        return decryptPresaleKey(strjson, password);
    else if(jsonArr.Crypto!=null||jsonArr.crypto!=null)
        return decryptGethKeyV3(strjson, password);
    else if(jsonArr.hash!=null)
        return decryptEthWalletJson(strjson, password);
    else
        throw "Sorry! we dont have a clue what kind of wallet file this is.";
}
function formatAddress(addr, format){
    if(addr.substr(0, 2) == '0x' && format == 'raw')
        addr = addr.substr(2);  
    if(addr.substr(0, 2) != '0x' && format == 'hex')
        addr = '0x' + addr;
    return addr;
}
/*function decryptGethKeyV1(gethJson, password){
    gethJson = JSON.parse(gethJson);
	var iv = gethJson.Crypto.cipherparams.iv;
    var cipherText = gethJson.Crypto.ciphertext;
    var bytesDerivedKey = getKDFKey(gethJson.Crypto, password);
    var bytesDerivedKey16 = hexToBytes(bytesToHex(bytesDerivedKey)).slice(0, 16);
    var dkey = CryptoJS.SHA3(hexToCryptoJS(bytesToHex(bytesDerivedKey16)), {
		outputLength: 256
	});
    dkey = hexToBytes(cryptoJSToHex(dkey)).slice(0,16);
    console.log(bytesToHex(dkey));
    var decrypted = CryptoJS.AES.decrypt({
		ciphertext: hexToCryptoJS(cipherText)
	}, hexToCryptoJS(bytesToHex(dkey)), {
		mode: CryptoJS.mode.CBC,
		padding: CryptoJS.pad.Pkcs7 ,
		iv: hexToCryptoJS(iv)
	});
    return cryptoJSToHex(decrypted); //doesnt work not sure why, I'll figure it out later
}*/
function strPrivateKeyToAddress(privkey){
    var public = ethUtil.privateToPublic(new Buffer(privkey, 'hex'));
    return ethUtil.publicToAddress(public).toString('hex');
}
function getKDFKey(cryptoJson, password) {
	var salt = hexToBytes(cryptoJson.kdfparams.salt);
	var authArr = stringToBytes(password);
	var dklen = cryptoJson.kdfparams.dklen;
	if (cryptoJson.kdf == "scrypt") {
		var n = cryptoJson.kdfparams.n;
		var r = cryptoJson.kdfparams.r;
		var p = cryptoJson.kdfparams.p;
		var scrypt = scrypt_module_factory(33554432 * 10);
		return scrypt.crypto_scrypt(authArr, salt, n, r, p, dklen);
	} else if(cryptoJson.kdf == "pbkdf2"){
        var c = cryptoJson.kdfparams.c;
        var prf = cryptoJson.kdfparams.prf;
        var derivedKey = sha256.pbkdf2(stringToBytes(password), hexToBytes(cryptoJson.kdfparams.salt), c, dklen);
        /*var derivedKey = CryptoJS.PBKDF2(password, hexToCryptoJS(cryptoJson.kdfparams.salt), {
		  keySize: dklen,
		  iterations: c,
		  hasher: CryptoJS.algo.SHA256 //this is painfully slow
	   });*/
      return derivedKey;
	}
}

function hexToCryptoJS(x) {
	return CryptoJS.enc.Hex.parse(x);
}

function cryptoJSToHex(x) {
	return CryptoJS.enc.Hex.stringify(x);
}
function validateEtherAddress(address){
    if (!/^(0x)?[0-9a-f]{40}$/i.test(address))return false;
    else if (/^(0x)?[0-9a-f]{40}$/.test(address) || /^(0x)?[0-9A-F]{40}$/.test(address)) return true;
    else return isChecksumAddress(address);
}
function isChecksumAddress(address) {    
    return address == toChecksumAddress(address);
};
function toChecksumAddress(address) { 
    if (typeof address === 'undefined') return '';
    address = address.toLowerCase().replace('0x','');
    var addressHash = ethUtil.sha3(address).toString('hex');
    var checksumAddress = '0x';
    for (var i = 0; i < address.length; i++ )
        checksumAddress += parseInt(addressHash[i], 16) > 7 ? address[i].toUpperCase() : address[i];
    return checksumAddress;
};
function hex2str(hex) {
	var hex = hex.toString();
	var str = '';
	for (var i = 0; i < hex.length; i += 2)
	str += String.fromCharCode(parseInt(hex.substr(i, 2), 16));
	return str;
}

function bytesToHex(bytes) {
	for (var hex = [], i = 0; i < bytes.length; i++) {
		hex.push((bytes[i] >>> 4).toString(16));
		hex.push((bytes[i] & 0xF).toString(16));
	}
	return hex.join("");
}

function hexToBytes(hex) {
	for (var bytes = [], c = 0; c < hex.length; c += 2)
	bytes.push(parseInt(hex.substr(c, 2), 16));
	return bytes;
}

function stringToBytes(str) {
	var bytes = [];
	for (var i = 0; i < str.length; ++i) {
		bytes.push(str.charCodeAt(i));
	}
	return bytes;
}
function getDangerText(text){
    return '<p class="text-danger"><strong> '+text+'</strong></p>';
}
function getSuccessText(text){
    return '<p class="text-success"><strong>' + text + '</strong></p>';
}
$(document).ready(function() {});

function generateBulkWallets() {
	var password = $("#bulkgenpassword").val();
	var count = $("#numberwallets").val();
	if (count == "") {
		alert("Please enter the amount of wallets you want to generate.");
		return;
	} else if (count != parseInt(count, 10)) {
		alert("Digits only please");
		return;
	}
	var isencrypted = false;
	if (password != "" && password.length < 7) {
		alert("Your password must be at least 7 characters.");
		return;
	} else if (password != "" && password.length >= 7) {
		isencrypted = true;
	}
	if (isencrypted) $("#bulkIsEnc").html(" (Encrypted)")
	else
	$("#bulkIsEnc").html(" (Unencrypted)")
	$("#generatedbulkwallets").show();
	$('#bulkgentable tr:not(:first)').remove();
	var acc = new Accounts();
	var csv = "";
	var jsonarr = [];
	var printjson = [];
	var txt = "";
	for (var i = 0; i < count; i++) {
		if (isencrypted) {
			var newAccount = acc.new(password);
			var addressHash = cryptoJSToHex(CryptoJS.SHA3(newAccount.address));
			addressHash = addressHash.substr(addressHash.length - 4);
			newAccount.private = newAccount.private + addressHash;
		} else
		var newAccount = acc.new();
		$('#bulkgentable tr:last').after('<tr class="privaddkey"><td><div id="addressIdenticon" class="addressIdenticon-' + i + '"></div></td><td><textarea class="form-control" rows="4" type="text" disabled>' + toChecksumAddress(newAccount.address) + '</textarea></td><td><textarea class="form-control" rows="4" type="text" disabled>' + newAccount.private + '</textarea></td></tr>');
		$(".addressIdenticon-" + i).css("background-image", 'url(' + blockies.create({
			seed: newAccount.address.toLowerCase(),
			size: 8,
			scale: 16
		}).toDataURL() + ')');
		csv += newAccount.address + ',' + newAccount.private + '\n';
		txt += newAccount.address + '\t' + newAccount.private + '\n';
		jsonarr.push({
			address: newAccount.address,
			private: newAccount.private
		});
		printjson.push({
			address: toChecksumAddress(newAccount.address),
			private: acc.get(newAccount.address, password).private
		});
	}
	var csvblob = new Blob([csv], {
		type: "text/csv;charset=UTF-8"
	});
	var txtblob = new Blob([txt], {
		type: "text/plain;charset=UTF-8"
	});
	var jsonblob = new Blob([JSON.stringify(jsonarr)], {
		type: "text/json;charset=UTF-8"
	});
	var fname = "bulk_ether_accounts";
	$("#bulkexportjson").attr('href', window.URL.createObjectURL(jsonblob));
	$("#bulkexportjson").attr('download', fname + '.json');
	$("#bulkexportcsv").attr('href', window.URL.createObjectURL(csvblob));
	$("#bulkexportcsv").attr('download', fname + '.csv');
	$("#bulkexporttxt").attr('href', window.URL.createObjectURL(txtblob));
	$("#bulkexporttxt").attr('download', fname + '.txt');
	$("#bulkwalletprint").unbind();
	$("#bulkwalletprint").click(function() {
		openPrintPaperWallets(JSON.stringify(printjson));
	});
	acc.clear();
}

$(document).ready(function() {
	$('input[type=radio][name=typeOfKeyRadio]').change(function() {
		resetDecryptValues();
		if (this.value == 'fileupload') {
			$("#selectedTypeKey").hide();
			$("#selectedUploadKey").show();
			decryptType = "fupload";
		} else if (this.value == 'pasteprivkey') {
			$("#selectedUploadKey").hide();
			$("#selectedTypeKey").show();
			decryptType = "privkey";
		}
	});
	$('#walletfilepassword').on('paste, keyup', function() {
		if ($('#walletfilepassword').val() != "") {
			$("#uploadbtntxt-wallet").show();
			$("#uploadbtntxt-privkey").hide();
			$("#walletuploadbutton").show();
		} else {
			$("#walletuploadbutton").hide();
		}
	});
	$('input[type=radio][name=currencyRadio]').change(function() {
		$("#sendtxamount").trigger("keyup");
	});
	$('#sendtxamount').on('paste, keyup', function() {
		var amount = $('#sendtxamount').val();
		if ($('#sendtxamount').val() != "" && $.isNumeric(amount) && amount > 0) {
			var etherUnit = $('input[type=radio][name=currencyRadio]:checked').val();
			$("#weiamount").html('<p class="text-success"><strong>' + toWei(amount, etherUnit) + ' wei ( approximately ' + toFiat(amount, etherUnit, usdval) + ' USD/' + toFiat(amount, etherUnit, eurval) + ' EUR )</strong></p>');
		} else if ($('#sendtxamount').val() != "" && !$.isNumeric(amount)) {
			$("#weiamount").html('<p class="text-danger"><strong>Invalid amount</strong></p>');
		} else {
			$("#weiamount").html('');
		}
	});
	$('.validateAddress').on('paste, keyup', function() {
		$('.' + $(this).attr('identicon')).css("background-image", '');
		if (validateEtherAddress($(this).val())) {
			$('.' + $(this).attr('status')).html('<p class="text-success"><strong> Address is valid</strong></p>').fadeIn(50);
			$('.' + $(this).attr('identicon')).css("background-image", 'url(' + blockies.create({
				seed: $(this).val().trim().toLowerCase(),
				size: 8,
				scale: 16
			}).toDataURL() + ')');
		} else if ($(this).val() == "") {
			$('.' + $(this).attr('status')).html('');
		} else {
			$('.' + $(this).attr('status')).html('<p class="text-danger"><strong> Invalid address</strong></p>').fadeIn(50);
		}
	});
	$('#privkeypassword').on('paste, keyup', function() {
		if ($('#privkeypassword').val().length > 6) {
			$("#uploadbtntxt-wallet").hide();
			$("#uploadbtntxt-privkey").show();
			$("#walletuploadbutton").show();
		} else {
			$("#walletuploadbutton").hide();
		}
	});
	$('#manualprivkey').on('paste, keyup, input', function() {
		$("#divprikeypassword").hide();
		$("#walletuploadbutton").hide();
		$("#uploadbtntxt-wallet").hide();
		$("#uploadbtntxt-privkey").hide();
		$("#manualprivkey").val($("#manualprivkey").val().replace(/(?:\r\n|\r|\n| )/g, ''));
		if ($('#manualprivkey').val().length == 128 || $('#manualprivkey').val().length == 132) {
			$("#divprikeypassword").show();
		} else if ($('#manualprivkey').val().length == 64) {
			$("#uploadbtntxt-wallet").hide();
			$("#uploadbtntxt-privkey").show();
			$("#walletuploadbutton").show();
		}
	});
	$('.btn-file :file').change(function() {
		if (!window.File || !window.FileReader || !window.FileList || !window.Blob) {
			alert('The File APIs are not fully supported in this browser. Please use a modern browser');
			return;
		}
		var input = $(this),
			numFiles = input.get(0).files ? input.get(0).files.length : 1,
			label = input.val().replace(/\\/g, '/').replace(/.*\//, '');
		input.trigger('fileselect', [numFiles, label]);
	});
	$('.btn-file :file').on('fileselect', function(event, numFiles, label) {
		$('#fuploadStatus').empty();
		$('#walletfilepassword').val('');
		PrivKey = "";
		file = $('.btn-file :file')[0].files[0];
		var fr = new FileReader();
		fr.onload = function() {
			try {
				if (walletRequirePass(fr.result)) {
					$("#walletPasdiv").show();
					$("#walletuploadbutton").hide();
				} else {
					$("#walletPasdiv").hide();
					$("#walletuploadbutton").show();
					$("#uploadbtntxt-wallet").show();
					$("#uploadbtntxt-privkey").hide();
				}
			} catch (err) {
				$('#fuploadStatus').append('<p class="text-center text-danger"><strong> ' + err + '</strong></p>');
			}
		};
		fr.readAsText(file);
		var input = $(this).parents('.input-group').find(':text'),
			log = numFiles > 1 ? numFiles + ' files selected' : label;
		if (input.length) {
			input.val(log);
		} else {
			if (log) {
				$('#fuploadStatus').append('<p class="text-center text-success"><strong> File Selected: ' + log + '</strong></p>');
			}
		}
	});
});

function decryptData() {
	$("#decryptStatus").html('<p class="text-center text-info"><strong> Please Wait...</strong></p>').fadeIn(10);
	setTimeout(function() {
		decryptFormData();
	}, 100);
}

function onViewWalletOpens() {
	resetDecryptValues();
	$("#walletselection").detach().appendTo($('#viewDetailsDecryptWallet'));
	$("#decryptdata").attr('onDecrypt', 'walletViewDecryptSuccess');
}

function setWalletBalance() {
	getBalance($("#accountAddress").html(), function(result) {
		if (!result.error) {
			var bestCurAmount = getBestEtherKnownUnit(result.data.balance);
			$("[id=accountBalance]").html(bestCurAmount.amount + " " + bestCurAmount.unit);
			getETHvalue('USD', function(value) {
				usdval = value;
				tusdval = toFiat(bestCurAmount.amount, bestCurAmount.unit, value);
				$("[id=accountBalanceUsd]").html(formatCurrency(parseFloat(tusdval), '$') + " USD");
			});
			getETHvalue('EUR', function(value) {
				eurval = value;
				teurval = toFiat(bestCurAmount.amount, bestCurAmount.unit, value);
				$("[id=accountBalanceEur]").html(formatCurrency(parseFloat(teurval), '&euro;') + " EUR");
			});
			getETHvalue('BTC', function(value) {
				btcval = value;
				tbtcval = toFiat(bestCurAmount.amount, bestCurAmount.unit, value);
				$("[id=accountBalanceBtc]").html(tbtcval + " BTC");
			});
		} else
		console.log(result.msg);
	});
}

function formatCurrency(n, currency) {
	return currency + " " + n.toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g, "$1,");
}

function walletViewDecryptSuccess() {
	$("#decryptStatus").html('<p class="text-center text-success"><strong> Wallet successfully decrypted</strong></p>').fadeIn(2000);
	var privPass = $('#privkeypassword').val();
	$("#decryptedWalletDetails").show();
	var decrytedAdd = formatAddress(strPrivateKeyToAddress(PrivKey), 'hex');
	$("#accountAddress").html(decrytedAdd);
	setWalletBalance();
	$('.addressIdenticonViewW').css("background-image", 'url(' + blockies.create({
		seed: decrytedAdd.toLowerCase(),
		size: 8,
		scale: 16
	}).toDataURL() + ')');
	$("#addressViewW").val(toChecksumAddress(decrytedAdd));
	$("#privkeyViewW").val(PrivKey);
	$("#qrcodeAddViewW").empty();
	new QRCode($("#qrcodeAddViewW")[0], {
		text: decrytedAdd,
		width: $("#qrcodeAddViewW").width(),
		height: $("#qrcodeAddViewW").width(),
		colorDark: "#000000",
		colorLight: "#ffffff",
		correctLevel: QRCode.CorrectLevel.H
	});
	$("#qrcodeViewW").empty();
	new QRCode($("#qrcodeViewW")[0], {
		text: PrivKey,
		width: $("#qrcodeViewW").width(),
		height: $("#qrcodeViewW").width(),
		colorDark: "#000000",
		colorLight: "#ffffff",
		correctLevel: QRCode.CorrectLevel.H
	});
	var printjson = [];
	printjson.push({
		address: decrytedAdd,
		private: PrivKey
	});
	$("#printqrViewWallet").unbind();
	$("#printqrViewWallet").click(function() {
		openPrintPaperWallets(JSON.stringify(printjson));
	});
}

function walletDecryptFailed(err) {
	$("#decryptStatus").html('<p class="text-center text-danger"><strong> ' + err + '</strong></p>').fadeIn(50).fadeOut(3000);
	$("#wallettransactions").hide();
}

function decryptFormData() {
	PrivKey = "";
	if (decryptType == 'fupload') {
		file = $('.btn-file :file')[0].files[0];
		var fr = new FileReader();
		fr.onload = function() {
			try {
				PrivKey = getWalletFilePrivKey(fr.result, $('#walletfilepassword').val());
				window[$('#decryptdata').attr('onDecrypt')]();
			} catch (err) {
				walletDecryptFailed(err);
			}
		};
		fr.readAsText(file);
	} else if (decryptType == 'privkey') {
		try {
			PrivKey = decryptTxtPrivKey($('#manualprivkey').val(), $("#privkeypassword").val());
			window[$('#decryptdata').attr('onDecrypt')]();
		} catch (err) {
			walletDecryptFailed("Invalid password");
		}
	}
}

$(document).ready(function() {});

function transferAllBalance() {
    var gasLimit = parseInt($('#gasLimit').val());
	getMaxSendAmount($("#accountAddress").html(),gasLimit, function(data) {
		$('#sendtxamount').val(data);
		$('input[type=radio][name=currencyRadio][value=ether]').prop("checked", true);
		$('#sendtxamount').trigger("keyup");
	}, function(err) {
		$("#txcreatestatus").html('<p class="text-center text-danger"><strong> ' + err + '</strong></p>').fadeIn(50).fadeOut(3000);
	});
}

function donateButtonClick() {
	$("#sendtxaddress").val('0x7cB57B5A97eAbe94205C07890BE4c1aD31E486A8');
	$("#donateThanks").show();
	$("#sendtxaddress").trigger("keyup");
}

function onSendTransactionOpens() {
	resetDecryptValues();
	$("#walletselection").detach().appendTo($('#sendTransactionDecryptWallet'));
	$("#decryptdata").attr('onDecrypt', 'walletSendDecryptSuccess');
}

function preSendTransaction() {
	sendTransaction($("#tasignedtx").val(), function(data) {
		$("#txsendstatus").html('<p class="text-center text-success"><strong> Transaction submitted. TX ID: ' + data + '</strong></p>');
		setWalletBalance();
	}, function(err) {
		$("#txsendstatus").html('<p class="text-center text-danger"><strong>' + err + '</strong></p>');
	});
	$('#sendTransaction').modal('hide');
}

function preCreateTransaction() {
	try {
		$("#tarawtx").val("");
		$("#tasignedtx").val("");
		$("#txsendstatus").html('')
		var toAddress = $('#sendtxaddress').val();
		if (PrivKey.length != 64) throw "Invalid Private key, try again";
		if (!validateEtherAddress(toAddress)) throw "Invalid to Address, try again";
		if (!$.isNumeric($('#sendtxamount').val()) || $('#sendtxamount').val() <= 0) throw "Invalid amount, try again";
		var etherUnit = $('input[type=radio][name=currencyRadio]:checked').val();
		var weiAmount = toWei($('#sendtxamount').val(), etherUnit);
        var gasLimit = parseInt($('#gasLimit').val());
		createTransaction(PrivKey, toAddress, weiAmount, gasLimit, function(data) {
			$("#tarawtx").val(data.raw);
			$("#tasignedtx").val(data.signed);
			$("#txcreatestatus").html('<p class="text-center text-success"><strong> Transaction generated</strong></p>').fadeIn(50);
			$("#divtransactionTAs").show();
			$("#divsendtranaction").show();
			$("#confirmAmount").html($('#sendtxamount').val());
			$("#confirmCurrancy").html(etherUnit);
			$("#confirmAddress").html(toAddress);
		}, function(err) {
			$("#txcreatestatus").html('<p class="text-center text-danger"><strong> ' + err + '</strong></p>').fadeIn(50).fadeOut(3000);
			$("#divtransactionTAs").hide();
			$("#divsendtranaction").hide();
		});
	} catch (err) {
		$("#txcreatestatus").html('<p class="text-center text-danger"><strong> ' + err + '</strong></p>').fadeIn(50).fadeOut(3000);
		$("#divtransactionTAs").hide();
		$("#divsendtranaction").hide();
	}
}

function walletSendDecryptSuccess() {
	var decrytedAdd = formatAddress(strPrivateKeyToAddress(PrivKey), 'hex');
	$("#accountAddress").html(toChecksumAddress(decrytedAdd));
	$('.walletaddressIdenticon').css("background-image", 'url(' + blockies.create({
		seed: decrytedAdd.toLowerCase(),
		size: 8,
		scale: 16
	}).toDataURL() + ')');
	setWalletBalance();
	$("#decryptStatus").html('<p class="text-center text-success"><strong> Wallet successfully decrypted</strong></p>').fadeIn(2000);
	$("#wallettransactions").show();
}

$(document).ready(function() {
	$('input[type=radio][name=currencyRadioOffline]').change(function() {
		$("#offlineSendtxamount").trigger("keyup");
	});
	$('#offlineSendtxamount').on('paste, keyup', function() {
		var amount = $(this).val();
		if (amount != "" && $.isNumeric(amount) && amount > 0) {
			var etherUnit = $('input[type=radio][name=currencyRadioOffline]:checked').val();
			$("#offlineweiamount").html(getSuccessText(toWei(amount, etherUnit) + " wei"));
		} else if (amount != "" && !$.isNumeric(amount)) {
			$("#offlineweiamount").html(getDangerText("Invalid amount"));
		} else {
			$("#offlineweiamount").html('');
		}
	});
});

function onOfflineTxOpens() {
	resetDecryptValues();
	$("#walletselection").detach().appendTo($('#sendOfflineTransactionDecryptWallet'));
	$("#decryptdata").attr('onDecrypt', 'offlineTxSuccess');
}

function offlineTxSuccess() {
	$("#decryptStatus").html(getSuccessText('Wallet successfully decrypted')).fadeIn(2000);
}

function sendOfflineTxApprove() {
	sendTransaction($("#offlineSerializedTxPub").val(), function(data) {
		$("#offlineTxPublishStatus").html(getSuccessText('Transaction submitted. TX ID: ' + data));
	}, function(err) {
		$("#offlineTxPublishStatus").html(getDangerText(err));
	});
	$('#sendTransactionOffline').modal('hide');
}

function sendOfflineTx() {
	var serializedTx = $("#offlineSerializedTxPub").val();
	if (serializedTx == "") {
		$("#offlineTxPublishStatus").html(getDangerText("empty transaction, try again")).fadeIn(50).fadeOut(5000);
		return;
	}
	try {
		var rawTx = rawToTransaction(serializedTx);
		var ethVal = toEther(rawTx.value, 'wei');
		var toAdd = rawTx.to;
		$("#offlineConfirmAmount").html(ethVal);
		$("#offlineConfirmAddress").html(toAdd);
		$('#sendTransactionOffline').modal('show');
	} catch (e) {
		$("#offlineTxPublishStatus").html(getDangerText(e)).fadeIn(50).fadeOut(5000);
	}
}

function genSignedOfflineTx() {
	if (!$.isNumeric($('#offlineSendtxamount').val()) || $('#offlineSendtxamount').val() < 0) {
		$("#offlineTxStatus").html(getDangerText("invalid value, try again")).fadeIn(50).fadeOut(5000);
		return;
	}
	var etherUnit = $('input[type=radio][name=currencyRadioOffline]:checked').val();
	var rawTx = {
		nonce: $('#offlineGasNonce').val(),
		gasPrice: $('#offlineGasPrice').val(),
		gasLimit: $('#offlineGasLimit').val(),
		to: $('#offlineToAdd').val(),
		value: toWei($('#offlineSendtxamount').val(), etherUnit),
		data: $('#offlineData').val()
	};
	createTransactionFromRaw(rawTx, PrivKey, function(data) {
		$(".offlineSerializedTx").val(data.signed);
	}, function(error) {
		$("#offlineTxStatus").html(getDangerText(error)).fadeIn(50).fadeOut(5000);
	});
}

function getAddressInfo() {
	var addField = $("#offlineFromAdd");
	var address = addField.val();
	if (!validateEtherAddress(address)) {
		$('.' + addField.attr('status')).html(getDangerText('Invalid Address')).fadeIn(50);
	} else if (address == '') {
		$('.' + addField.attr('status')).html(getDangerText('Enter Address')).fadeIn(50);
	} else {
		getTransactionData(address, function(data) {
			if (data.error) {
				$('.' + addField.attr('status')).html(getDangerText("Error occurred: " + data.msg)).fadeIn(50);
				return;
			}
			data = data.data;
			data.gasprice = new BigNumber(data.gasprice).plus(1000000000).toDigits(2).toString();
			data.nonce = new BigNumber(data.nonce).toString();
			$(".offlineGPrice").val(data.gasprice);
			$(".offlineNonce").val(data.nonce);
			$("#step1Output").show();
		});
	}
}

$(document).ready(function() {});

function openPrintPaperWallets(strjson) {
	var win = window.open("about:blank", "_blank");
	data = "<html><head><link rel=\"stylesheet\" href=\"css\/etherwallet-master.min.css\"\/><script type=\"text\/javascript\" src=\"js\/jquery-1.11.3.min.js\"><\/script><script type=\"text\/javascript\" src=\"js\/etherwallet-static.min.js\"><\/script><script type=\"text\/javascript\">function generateWallets(){    var json = JSON.parse($(\"#printwalletjson\").html());    for(var i=0;i<json.length;i++){        var walletTemplate = $(\'<div\/>\').append($(\"#print-container\").clone());        new QRCode($(walletTemplate).find(\"#paperwalletaddqr\")[0], {\t\t  text: json[i][\'address\'],\t\t  colorDark: \"#000000\",\t\t  colorLight: \"#ffffff\",\t\tcorrectLevel: QRCode.CorrectLevel.H\t   });       new QRCode($(walletTemplate).find(\"#paperwalletprivqr\")[0], {\t\t  text: json[i][\'private\'],\t\t  colorDark: \"#000000\",\t\t  colorLight: \"#ffffff\",\t\tcorrectLevel: QRCode.CorrectLevel.H\t   });       $(walletTemplate).find(\"#paperwalletadd\").html(json[i][\'address\']);       $(walletTemplate).find(\"#paperwalletpriv\").html(json[i][\'private\']);       walletTemplate = $(walletTemplate).find(\"#print-container\").show();       $(\"body\").append(walletTemplate);    }    setTimeout(function(){window.print();},2000);}<\/script><\/head><body><span id=\"printwalletjson\" style=\"display: none;\">{{WALLETJSON}}<\/span><div class=\"print-container\" style=\"display: none; margin-bottom: 28px;\" id=\"print-container\">        <img src=\"images\/logo-1.png\" class=\"ether-logo-1\" height=\"100%\" width=\"auto\"\/>        <img src=\"images\/logo-2.png\" class=\"ether-logo-2\"\/>        <img src=\"images\/ether-title.png\" height=\"100%\" width=\"auto\" class=\"print-title\"\/>          <div class=\"print-qr-code-1\">          <div id=\"paperwalletaddqr\"><\/div>            <p class=\"print-text\" style=\"padding-top: 25px;\">YOUR ADDRESS<\/p>          <\/div>          <div class=\"print-qr-code-2\">            <div id=\"paperwalletprivqr\"><\/div>            <p class=\"print-text\" style=\"padding-top: 30px;\">YOUR PRIVATE KEY<\/p>          <\/div>          <div class=\"print-notes\">            <img src=\"images\/notes-bg.png\" width=\"90%;\" height=\"auto\" class=\"pull-left\" \/>            <p class=\"print-text\">AMOUNT \/ NOTES<\/p>          <\/div>        <div class=\"print-address-container\">          <p>            <strong>Your Address:<\/strong><br \/>            <span id=\"paperwalletadd\"><\/span>          <\/p>          <p>            <strong>Your Private Key:<\/strong><br \/>            <span id=\"paperwalletpriv\"><\/span>        <\/p>    <\/div><\/div><\/body><\/html>";
	data = data.replace("{{WALLETJSON}}", strjson);
	win.document.write(data);
	$(win).ready(function() {
		win.document.write("<script>generateWallets();</script>");
	});
}

function printQRcode() {
	var address = $("#address").val();
	var privkey = $("#privkey").val();
	var jsonarr = [];
	jsonarr.push({
		address: address,
		private: privkey
	});
	openPrintPaperWallets(JSON.stringify(jsonarr));
}
var digixContract = "0xf0160428a8552ac9bb7e050d90eeade4ddd52843";
var digixUserInfo = {to: digixContract , data: "0x1959a002000000000000000000000000"};
function bindDigixElements() {
	$("#accountBalance").bind("DOMSubtreeModified", function() {
        var obj = digixUserInfo; 
        obj.data = obj.data+$("#accountAddress").html().toLowerCase().replace('0x', '');
		getEthCall(obj, function(data) {
			if (data.error) {
				$("#decryptStatus").html(data.msg);
			} else {
                digixObj = processDigixInfo(data.data);
                $("#Dcentstotal").html(digixObj.centstotal);
                $("#Dweitotal").html(digixObj.weitotal);
                $("#Dshare").html(digixObj.share);
                $("#Dbadges").html(digixObj.badges);
                $("#Dclaimed").html(digixObj.claimed.toString());
			}
		});
	});
}
function processDigixInfo(data){
    data = data.replace('0x','');
    var values = data.match(/.{1,64}/g);
    var digixObj = {centstotal: new BigNumber('0x'+values[0]).div(100).toString(),
                    weitotal: new BigNumber('0x'+values[1]).div(getValueOfUnit('ether')).toString(),
                    share: new BigNumber('0x'+values[2]).div(1000000000).toString(),
                    badges: new BigNumber('0x'+values[3]).toString(),
                    claimed: new BigNumber('0x'+values[4]).toString()== '1'};
    return digixObj;
}
var PrivKey = "";
var decryptType = "";
var usdval;
var eurval;
var btcval;
(function($) {
	$.fn.extend({
		isChildOf: function(filter) {
			return $(filter).find(this).length > 0;
		}
	});
})(jQuery);
$(document).ready(function() {
	bindElements();
	buttonBinder();
	checkAndLoadPageHash();
	checkAndRedirectHTTPS();
    if($('.digixSale').length)
        bindDigixElements();
});

function buttonBinder() {
	$('.btnAction').each(function(i, obj) {
		$(obj).unbind().bind("click", window[$(obj).attr('func')]);
	});
}

function checkAndRedirectHTTPS() {
	var host = "myetherwallet.com";
	var githost = "kvhnuke.github.io";
	var githostw = "www.kvhnuke.github.io";
	var hostw = "www.myetherwallet.com";
	if ((host == window.location.host || githost == window.location.host || hostw == window.location.host || githostw == window.location.host) && (window.location.protocol != "https:")) window.location.protocol = "https";
}

function checkAndLoadPageHash() {
	if (window.location.hash) {
		var phash = window.location.hash.substr(1);
		$(".ptabs").each(function(index) {
			if ($(this).attr('id') == phash) {
				$(this).click();
				setTimeout(function() {
					$('html,body').scrollTop(0);
				}, 50);
				return;
			}
		});
	}
}

function onTabOpen(tabid) {
	if (tabid == 'send-transaction') {
		onSendTransactionOpens();
	} else if (tabid == 'view-wallet-info') {
		onViewWalletOpens();
	} else if (tabid == 'offline-transaction') {
		onOfflineTxOpens();
	}
}

function paneNavigate(showEleId, activeEleId) {
	hideAllMainContainers();
	$("#" + showEleId).show();
	$("#" + activeEleId).parent().addClass('active');
	location.hash = activeEleId;
	onTabOpen(activeEleId);
	$('html,body').scrollTop(0);
}

function bindElements() {
	$(".ptabs").each(function(index) {
		$(this).click(function() {
			paneNavigate($(this).attr('showId'), this.id);
		});
	});
}

function resetDecryptValues() {
	$('#fuploadStatus').empty();
	$('#walletfilepassword').val('');
	$('#privkeypassword').val('');
	$('.btn-file :file').val('');
	$('#manualprivkey').val('');
	$("#walletuploadbutton").hide();
	$("#walletPasdiv").hide();
	$("#divprikeypassword").hide();
	$("#wallettransactions").hide();
	$("#decryptStatus").hide();
	$("#selectedTypeKey").hide();
	$("#privkeyViewW").val('');
	$("#qrcodeViewW").empty();
}

function hideAllMainContainers() {
    PrivKey = "";
	$("#paneWalgen").hide();
	$("#paneBulkgen").hide();
	$("#paneViewWalletDetails").hide();
	$("#paneSendTrans").hide();
	$("#paneOfflineTrans").hide();
	$("#paneHelp").hide();
	$("#paneContact").hide();
	$("#panePrint").hide();
	$("#privkeyViewW").val('');
	$("#decryptedWalletDetails").hide();
	$("#qrcodeViewW").empty();
	$("#bulk-generate").parent().removeClass('active');
	$("#generate-wallet").parent().removeClass('active');
	$("#view-wallet-info").parent().removeClass('active');
	$("#send-transaction").parent().removeClass('active');
	$("#offline-transaction").parent().removeClass('active');
	$("#offline-transaction").parent().removeClass('active');
	$("#help").parent().removeClass('active');
	$("#contact").parent().removeClass('active');
}

$(document).ready(function() {
	// collapsing elements on offline tx and help
	$(".collapsePanel.collapsed").slideUp();
	$(".collapseButton").click(function() {
		var collapseButton = $(this);
		var collapseContainer = $(this).parents(".collapseContainer");
		var collapsePanel = collapseContainer.children( ".collapsePanel" );
		collapsePanel.slideToggle();
		if ( collapseButton.html() == "-") {
			collapseButton.html("+");
		} else {
			collapseButton.html("-");
		}
	});

	// ontap hovers
	$(".account-help-icon").click(function() {
		$(this).children( ".account-help-text" ).toggle();
	});
});
